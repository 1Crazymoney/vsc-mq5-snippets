{
    "highestArrayMT5": {
        "body": 
        [
            "int highestIndex = ArrayMaximum(${1:array}, ${2:start}, ${3:count});",
            "double ${4:highest} = ${1:array}[highestIndex];"
        ],
        "description": "MT5: Finds the highest value in the array.",
        "prefix": "highestArrayMT5",
        "scope": "source.mq4"
    },
    "lowestArrayMT5": {
        "body": 
        [
            "int lowestIndex = ArrayMinimum(${1:array}, ${2:start}, ${3:count});",
            "double ${4:lowest} = ${1:array}[lowestIndex];"
        ],
        "description": "MT5: Finds the lowest value in the array.",
        "prefix": "lowestArrayMT5",
        "scope": "source.mq4"
    },
    "IndicatorRelease": {
        "body": "IndicatorRelease(${1:indicator_handle});",
        "description": "MT5: Releases indicator handler",
        "prefix": "IndicatorRelease",
        "scope": "source.mq4"
    },
    "maOnArrayMT5": {
        "body": 
        [
            "#include <MovingAverages.mqh>",
            "void MAOnArray(const int rates_total, const int prev_calculated, int sourceFirst, ENUM_MA_METHOD method, int period, double& in[], double& out[])",
            "{",
            "   if (period == 1)",
            "   {",
            "      for (int pos = sourceFirst; pos < rates_total; ++pos)",
            "      {",
            "         out[pos] = in[pos];",
            "      }",
            "      return;",
            "   }",
            "   int weightsum;",
            "   switch (method)",
            "   {",
            "      case MODE_SMA:",
            "         SimpleMAOnBuffer(rates_total, prev_calculated, sourceFirst, period, in, out);",
            "         break;",
            "      case MODE_EMA:",
            "         ExponentialMAOnBuffer(rates_total, prev_calculated, sourceFirst, period, in, out);",
            "         break;",
            "      case MODE_SMMA:",
            "         SmoothedMAOnBuffer(rates_total, prev_calculated, sourceFirst, period, in, out);",
            "         break;",
            "      case MODE_LWMA:",
            "         LinearWeightedMAOnBuffer(rates_total, prev_calculated, sourceFirst, period, in, out, weightsum);",
            "         break;",
            "   }",
            "}"
        ],
        "description": "MT5: switch statement for a price",
        "prefix": "maOnArrayMT5",
        "scope": "source.mq4"
    },
    "switchPriceMT5": {
        "body": 
        [
            "switch (${1:priceType})",
            "{",
            "   case PRICE_CLOSE:",
            "      break;",
            "   case PRICE_OPEN:",
            "      break;",
            "   case PRICE_HIGH:",
            "      break;",
            "   case PRICE_LOW:",
            "      break;",
            "   case PRICE_MEDIAN:",
            "      break;",
            "   case PRICE_TYPICAL:",
            "      break;",
            "   case PRICE_WEIGHTED:",
            "      break;",
            "}"
        ],
        "description": "MT5: switch statement for a price",
        "prefix": "switchPriceMT5",
        "scope": "source.mq4"
    },
    "propStreamMT5": {
        "body": 
        [
            "#property indicator_type${1:1}  ${2|DRAW_NONE,DRAW_LINE,DRAW_SECTION,DRAW_HISTOGRAM,DRAW_HISTOGRAM2,DRAW_ARROW,DRAW_ZIGZAG,DRAW_FILLING,DRAW_BARS,DRAW_CANDLES,DRAW_COLOR_LINE,DRAW_COLOR_SECTION,DRAW_COLOR_HISTOGRAM,DRAW_COLOR_HISTOGRAM2,DRAW_COLOR_ARROW,DRAW_COLOR_ZIGZAG,DRAW_COLOR_BARS,DRAW_COLOR_CANDLES|}",
            "#property indicator_color${1:1} ${3:RoyalBlue}",
            "#property indicator_width${1:1} ${4:1}",
            "#property indicator_style${1:1} ${5|STYLE_SOLID,STYLE_DASH,STYLE_DOT,STYLE_DASHDOT,STYLE_DASHDOTDOT|}",
            "#property indicator_label${1:1} \"${6:Name}\""
        ],
        "description": "MT5: Stream properties",
        "prefix": "propStreamMT5",
        "scope": "source.mq4"
    },
    "inputPriceMT5": {
        "body": 
        [
            "input ENUM_APPLIED_PRICE ${1:price} = ${2|PRICE_CLOSE,PRICE_OPEN,PRICE_HIGH,PRICE_LOW,PRICE_MEDIAN,PRICE_TYPICAL,PRICE_WEIGHTED|}; // ${3:Price type}"
        ],
        "description": "MT5: Input of a price",
        "prefix": "inputPrice",
        "scope": "source.mq4"
    },
    "OrderGetStringMT5": {
        "body": "OrderGetString(${1|ORDER_SYMBOL,ORDER_COMMENT,ORDER_EXTERNAL_ID|})",
        "description": "MT5: OrderGetString()",
        "prefix": "OrderGetStringMT5",
        "scope": "source.mq4"
    },
    "OrderGetDoubleMT5": {
        "body": "OrderGetDouble(${1|ORDER_VOLUME_INITIAL,ORDER_VOLUME_CURRENT,ORDER_PRICE_OPEN,ORDER_SL,ORDER_TP,ORDER_PRICE_CURRENT,ORDER_PRICE_STOPLIMIT|})",
        "description": "MT5: OrderGetDouble()",
        "prefix": "OrderGetDoubleMT5",
        "scope": "source.mq4"
    },
    "OrderGetIntegerMT5": {
        "body": "OrderGetInteger(${1|ORDER_TICKET,ORDER_TIME_SETUP,ORDER_TYPE,ORDER_STATE,ORDER_TIME_EXPIRATION,ORDER_TIME_DONE,ORDER_TIME_SETUP_MSC,ORDER_TIME_DONE_MSC,ORDER_TYPE_FILLING,ORDER_TYPE_TIME,ORDER_MAGIC,ORDER_REASON,ORDER_POSITION_ID,ORDER_POSITION_BY_ID|})",
        "description": "MT5: OrderGetInteger()",
        "prefix": "OrderGetIntegerMT5",
        "scope": "source.mq4"
    },
    "PositionGetStringMT5": {
        "body": "PositionGetString(${1|POSITION_SYMBOL,POSITION_COMMENT,POSITION_EXTERNAL_ID|})",
        "description": "MT5: PositionGetString()",
        "prefix": "OrderGetStringMT5",
        "scope": "source.mq4"
    },
    "PositionGetDoubleMT5": {
        "body": "PositionGetDouble(${1|POSITION_VOLUME,POSITION_PRICE_OPEN,POSITION_SL,POSITION_TP,POSITION_PRICE_CURRENT,POSITION_SWAP,POSITION_PROFIT|})",
        "description": "MT5: PositionGetDouble()",
        "prefix": "PositionGetDoubleMT5",
        "scope": "source.mq4"
    },
    "PositionGetIntegerMT5": {
        "body": "PositionGetInteger(${1|ORDER_TICKET,ORDER_TIME_SETUP,ORDER_TYPE,ORDER_STATE,ORDER_TIME_EXPIRATION,ORDER_TIME_DONE,ORDER_TIME_SETUP_MSC,ORDER_TIME_DONE_MSC,ORDER_TYPE_FILLING,ORDER_TYPE_TIME,ORDER_MAGIC,ORDER_REASON,ORDER_POSITION_ID,ORDER_POSITION_BY_ID,POSITION_TICKET,POSITION_TIME,POSITION_TIME_MSC,POSITION_TIME_UPDATE,POSITION_TIME_UPDATE_MSC,POSITION_TYPE,POSITION_MAGIC,POSITION_IDENTIFIER,POSITION_REASON|})",
        "description": "MT5: PositionGetInteger()",
        "prefix": "PositionGetIntegerMT5",
        "scope": "source.mq4"
    },
    "IndicatorReleaseClipboard": {
        "body": "IndicatorRelease(${CLIPBOARD:indicator_handle});",
        "description": "MT5: Releases indicator handler",
        "prefix": "IndicatorReleaseClipboard",
        "scope": "source.mq4"
    },
    "pipSizeMT5": {
        "body": 
        [
            "double point = SymbolInfoDouble(${1:_Symbol}, SYMBOL_POINT);",
            "int digit = (int)SymbolInfoInteger(${1:_Symbol}, SYMBOL_DIGITS);",
            "int mult = digit == 3 || digit == 5 ? 10 : 1;",
            "double pipSize = point * mult;"
        ],
        "description": "MT5: Get pip size",
        "prefix": "pipSizeMT5",
        "scope": "source.mq4"
    },
    "CustomIndicatorMT5": {
        "body": "${1:handle} = iCustom(${2:_Symbol}, ${3:_Period}, \"::Indicators\\\\\\\\${4:indicatorName}\", ${5:params});",
        "description": "MT5: Create custom indicator",
        "prefix": "CustomIndicatorMT5",
        "scope": "source.mq4"
    },
    "stochasticMT5": {
        "body": 
        [
            "${1:handle} = iStochastic(${2:_Symbol}, ${3:_Period}, ${4:stoch_k}, ${5:stoch_d}, ${6:stoch_slowing}, ${7|MODE_SMA,MODE_EMA,MODE_SMMA,MODE_LWMA|}, ${8|STO_LOWHIGH,STO_CLOSECLOSE|});"
        ],
        "description": "MT5: Create stochastic indicator",
        "prefix": "stochasticMT5",
        "scope": "source.mq4"
    },
    "adxMT5": {
        "body": 
        [
            "${1:handle} = iADX(${2:_Symbol}, ${3:_Period}, ${4:adx_period});"
        ],
        "description": "MT5: iADX",
        "prefix": "adxMT5",
        "scope": "source.mq4"
    },
    "adMT5": {
        "body": 
        [
            "${1:handle} = iAD(${2:_Symbol}, ${3:_Period}, ${4|VOLUME_TICK,VOLUME_REAL|});"
        ],
        "description": "MT5: iAD",
        "prefix": "adMT5",
        "scope": "source.mq4"
    },
    "rsiMT5": {
        "body": 
        [
            "${1:handle} = iRSI(${2:_Symbol}, ${3:_Period}, ${4:rsi_period}, ${5|PRICE_CLOSE,PRICE_OPEN,PRICE_HIGH,PRICE_LOW,PRICE_MEDIAN,PRICE_TYPICAL,PRICE_WEIGHTED|});"
        ],
        "description": "MT5: iRSI",
        "prefix": "rsiMT5",
        "scope": "source.mq4"
    },
    "bandsMT5": {
        "body": 
        [
            "${1:handle} = iBands(${2:_Symbol}, ${3:_Period}, ${4:bb_period}, ${5:bb_shift}, ${6:bb_deviation}, ${7|PRICE_CLOSE,PRICE_OPEN,PRICE_HIGH,PRICE_LOW,PRICE_MEDIAN,PRICE_TYPICAL,PRICE_WEIGHTED|});"
        ],
        "description": "MT5: iBands",
        "prefix": "bandsMT5",
        "scope": "source.mq4"
    },
    "macdMT5": {
        "body": 
        [
            "${1:handle} = iMACD(${2:_Symbol}, ${3:_Period}, ${4:fast_ema_period}, ${5:slow_ema_period}, ${6:signal_period}, ${7|PRICE_CLOSE,PRICE_OPEN,PRICE_HIGH,PRICE_LOW,PRICE_MEDIAN,PRICE_TYPICAL,PRICE_WEIGHTED|});"
        ],
        "description": "MT5: iMACD",
        "prefix": "macdMT5",
        "scope": "source.mq4"
    },
    "momentumMT5": {
        "body": 
        [
            "${1:handle} = iMomentum(${2:_Symbol}, ${3:_Period}, ${4:mom_period}, ${5|PRICE_CLOSE,PRICE_OPEN,PRICE_HIGH,PRICE_LOW,PRICE_MEDIAN,PRICE_TYPICAL,PRICE_WEIGHTED|});"
        ],
        "description": "MT5: iMomentum",
        "prefix": "momentumMT5",
        "scope": "source.mq4"
    },
    "cciMT5": {
        "body": 
        [
            "${1:handle} = iCCI(${2:_Symbol}, ${3:_Period}, ${4:ma_period}, ${5|PRICE_CLOSE,PRICE_OPEN,PRICE_HIGH,PRICE_LOW,PRICE_MEDIAN,PRICE_TYPICAL,PRICE_WEIGHTED|});"
        ],
        "description": "MT5: iCCI",
        "prefix": "cciMT5",
        "scope": "source.mq4"
    },
    "averagesMT5": {
        "body": "${1:hande} = iMA(${2:_Symbol}, ${3:_Period}, ${4:ma_period}, ${5:ma_shift}, ${6|MODE_SMA,MODE_EMA,MODE_SMMA,MODE_LWMA|}, ${7|PRICE_CLOSE,PRICE_OPEN,PRICE_HIGH,PRICE_LOW,PRICE_MEDIAN,PRICE_TYPICAL,PRICE_WEIGHTED|});",
        "description": "MT5: Value of averages indicator",
        "prefix": "averagesMT5",
        "scope": "source.mq4"
    },
    "stdevMT5": {
        "body": 
        [
            "double StDev(double& data[], int period, int pos)",
            "{",
            "   return MathSqrt(Variance(data, period, pos));",
            "}",
            "double Variance(double& data[], int period, int pos)",
            "{",
            "   double sum = 0;",
            "   double ssum = 0;",
            "   for (int i = 0; i < period; i++)",
            "   {",
            "      sum += data[pos - i];",
            "      ssum += MathPow(data[pos - i], 2);",
            "   }",
            "   return (ssum * period - sum * sum) / (period * (period - 1));",
            "}"
        ],
        "description": "MT5: StDev function",
        "prefix": "stdevMT5",
        "scope": "source.mq4"
    },
    "atrMT5": {
        "body": 
        [
            "${1:handle} = iATR(${2:_Symbol}, ${3:_Period}, ${4:length});"
        ],
        "description": "MT5: Create ATR indicator",
        "prefix": "atrMT5",
        "scope": "source.mq4"
    },
    "sarMT5": {
        "body": 
        [
            "${1:handle} = iSAR(${2:_Symbol}, ${3:_Period}, ${4:step}, ${5:maximum});"
        ],
        "description": "MT5: Create PSAR indicator",
        "prefix": "sarMT5",
        "scope": "source.mq4"
    },
    "wprMT5": {
        "body": 
        [
            "${1:handle} = iWPR(${2:_Symbol}, ${3:_Period}, ${4:calc_period});"
        ],
        "description": "MT5: Create WPR indicator",
        "prefix": "wprMT5",
        "scope": "source.mq4"
    },
    "StochasticOutput": {
        "body": 
        [
            "${1|MAIN_LINE,SIGNAL_LINE|}"
        ],
        "description": "MT5:Stochastic output lookup",
        "prefix": "StochasticOutput",
        "scope": "source.mq4"
    },
    "CopyBuffer": {
        "body": 
        [
            "double ${5:buffer}[${4:count}];",
            "if (CopyBuffer(${1:indicator_handle}, ${2:buffer_num}, ${3:rates_total - 1 - pos}, ${4:count}, ${5:buffer}) ${6|==,!=|} ${4:count})",
            "{",
            "}"
        ],
        "description": "MT5: Copy indicator's buffer",
        "prefix": "CopyBuffer",
        "scope": "source.mq4"
    },
    "OnCalculateMT5": {
        "body":
        [
            "int OnCalculate(const int rates_total,       // size of input time series",
            "                const int prev_calculated,   // number of handled bars at the previous call",
            "                const datetime& time[],      // Time array",
            "                const double& open[],        // Open array",
            "                const double& high[],        // High array",
            "                const double& low[],         // Low array",
            "                const double& close[],       // Close array",
            "                const long& tick_volume[],   // Tick Volume array",
            "                const long& volume[],        // Real Volume array",
            "                const int& spread[]          // Spread array",
            ")",
            "{",
            "   if (prev_calculated <= 0 || prev_calculated > rates_total)",
            "   {",
            "      //ArrayInitialize(out, EMPTY_VALUE);",
            "   }",
            "   int first = ${1:0};",
            "   for (int pos = MathMax(first, prev_calculated - 1); pos < rates_total; ++pos)",
            "   {",
            "      int oldPos = rates_total - pos - 1;",
            "   }",
            "   return rates_total;",
            "}"
        ],
        "description": "MT5: OnCalculate function",
        "prefix": "OnCalculateMT5",
        "scope": "source.mq4"
    },
    "OnInitMT5": {
        "body":
        [
            "string IndicatorObjPrefix;",
            "bool NamesCollision(const string name)",
            "{",
            "   for (int k = ObjectsTotal(0); k >= 0; k--)",
            "   {",
            "      if (StringFind(ObjectName(0, k), name) == 0)",
            "      {",
            "         return true;",
            "      }",
            "   }",
            "   return false;",
            "}",
            "string GenerateIndicatorPrefix(const string target)",
            "{",
            "   for (int i = 0; i < 1000; ++i)",
            "   {",
            "      string prefix = target + \"_\" + IntegerToString(i);",
            "      if (!NamesCollision(prefix))",
            "      {",
            "         return prefix;",
            "      }",
            "   }",
            "   return target;",
            "}",
            
            "int OnInit(void)",
            "{",
            "   IndicatorObjPrefix = GenerateIndicatorPrefix(\"${1:id}\");",
            "   IndicatorSetString(INDICATOR_SHORTNAME, \"${2:name}\");",
            "   IndicatorSetInteger(INDICATOR_DIGITS, Digits());",
            "}"
        ],
        "description": "MT5: OnInit function",
        "prefix": "OnInitMT5",
        "scope": "source.mq4"
    },
    "OnDeinitMT5": {
        "body":
        [
            "void OnDeinit(const int reason)",
            "{",
            "   ObjectsDeleteAll(0, IndicatorObjPrefix);",
            "}"
        ],
        "description": "MT5: OnDeinit function",
        "prefix": "OnDeinitMT5",
        "scope": "source.mq4"
    },
    "ObjectSetTextMT5": {
        "body":
        [
            "void ObjectSetText(string id, string text, int fontSize, string font, color clr)",
            "{",
            "   ObjectSetString(0, id, OBJPROP_TEXT, text);",
            "   ObjectSetString(0, id, OBJPROP_FONT, font);",
            "   ObjectSetInteger(0, id, OBJPROP_FONTSIZE, fontSize);",
            "   ObjectSetInteger(0, id, OBJPROP_COLOR, clr);",
            "}"
        ],
        "description": "MT5: ObjectSetText function similar to MT4",
        "prefix": "ObjectSetTextMT5",
        "scope": "source.mq4"
    },
    "PlotIndexSetInteger": {
        "body":
        [
            "PlotIndexSetInteger(${1:id}, ${2|PLOT_ARROW,PLOT_ARROW_SHIFT,PLOT_DRAW_BEGIN,PLOT_DRAW_TYPE,PLOT_SHOW_DATA,PLOT_SHIFT,PLOT_LINE_STYLE,PLOT_LINE_WIDTH,PLOT_COLOR_INDEXES,PLOT_LINE_COLOR|}, ${3:value});"
        ],
        "description": "MT5: PlotIndexSetInteger",
        "prefix": "PlotIndexSetInteger",
        "scope": "source.mq4"
    },
    "GetSpreadMT5": {
        "body":
        [
            "double ${1:spread} = SymbolInfoInteger(${2:_Symbol}, SYMBOL_SPREAD);"
        ],
        "description": "MT5: GetSpread",
        "prefix": "GetSpreadMT5",
        "scope": "source.mq4"
    },
    "enumDrawType": {
        "body":
        [
            "${1|DRAW_NONE,DRAW_LINE,DRAW_SECTION,DRAW_HISTOGRAM,DRAW_HISTOGRAM2,DRAW_ARROW,DRAW_ZIGZAG,DRAW_FILLING,DRAW_BARS,DRAW_CANDLES,DRAW_COLOR_LINE,DRAW_COLOR_SECTION,DRAW_COLOR_HISTOGRAM,DRAW_COLOR_HISTOGRAM2,DRAW_COLOR_ARROW,DRAW_COLOR_ZIGZAG,DRAW_COLOR_BARS,DRAW_COLOR_CANDLES|}"
        ],
        "description": "MT5: Lookup PLOT_DRAW_TYPE value",
        "prefix": "enumDrawType",
        "scope": "source.mq4"
    },
    "createTextObjectMT5": {
        "body":
        [
            "string ${1:id} = IndicatorObjPrefix + \"${2:textId}\";",
            "if (ObjectFind(${3:chart_ID}, ${1:id}) == -1)",
            "{",
            "   if (ObjectCreate(${3:chart_ID}, ${1:id}, OBJ_TEXT, ${4:sub_window}, ${5:time}, ${6:price}))",
            "   {",
            "      ObjectSetString(${3:chart_ID}, ${1:id}, OBJPROP_FONT, ${7:font});",
            "      ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_FONTSIZE, ${8:font_size});",
            "      ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_COLOR, ${9:clr});",
            "      ObjectSetDouble(${3:chart_ID}, ${1:id}, OBJPROP_ANGLE, ${11:angle});",
            "      ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_ANCHOR, ${12|ANCHOR_LEFT_UPPER,ANCHOR_LEFT,ANCHOR_LEFT_LOWER,ANCHOR_LOWER,ANCHOR_RIGHT_LOWER,ANCHOR_RIGHT,ANCHOR_RIGHT_UPPER,ANCHOR_UPPER,ANCHOR_CENTER|});",
            "      ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_BACK, ${13:back});",
            "      ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_SELECTABLE, ${14:selection});",
            "      ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_SELECTED, ${15:selection});",
            "      ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_HIDDEN, ${16:hidden});",
            "      ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_ZORDER, ${17:z_order});",
            "   }",
            "}",
            "ObjectSetString(${3:chart_ID}, ${1:id}, OBJPROP_TEXT, ${10:text});"
        ],
        "description": "MT5: Create OBJ_TEXT",
        "prefix": "createTextObjectMT5",
        "scope": "source.mq4"
    },
    "createRectangleObjectMT5": {
        "body":
        [
            "string ${1:id} = IndicatorObjPrefix + \"${2:textId}\";",
            "if (ObjectFind(${3:chart_ID}, ${1:id}) == -1)",
            "{",
            "   if (ObjectCreate(${3:chart_ID}, ${1:id}, OBJ_RECTANGLE, ${4:sub_window}, ${5:time1}, ${6:price1}, ${7:time2}, ${8:price2}))",
            "   {",
            "      ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_COLOR, ${9:clr});",
            "      ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_STYLE, ${10:style});",
            "      ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_WIDTH, ${11:width});",
            "      ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_FILL, ${12:fill});",
            "      ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_BACK, ${13:back});",
            "      ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_SELECTABLE, ${14:selection});",
            "      ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_SELECTED, ${15:selection});",
            "      ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_HIDDEN, ${16:hidden});",
            "      ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_ZORDER, ${17:z_order});",
            "   }",
            "}",
            "ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_TIME, 0, ${5:time1});",
            "ObjectSetDouble(${3:chart_ID}, ${1:id}, OBJPROP_PRICE, 0, ${6:price1});",
            "ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_TIME, 1, ${7:time2});",
            "ObjectSetDouble(${3:chart_ID}, ${1:id}, OBJPROP_PRICE, 1, ${8:price2});"
        ],
        "description": "MT5: Create OBJ_RECTANGLE",
        "prefix": "createRectangleObjectMT5",
        "scope": "source.mq4"
    },
    "createRectangleLabelMT5": {
        "body":
        [
            "string ${1:id} = IndicatorObjPrefix + \"${2:textId}\";",
            "if (ObjectFind(${3:chart_ID}, ${1:id}) == -1)",
            "{",
            "   if (ObjectCreate(${3:chart_ID}, ${1:id}, OBJ_RECTANGLE_LABEL, ${4:sub_window}, 0, 0))",
            "   {",
            "         ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_BGCOLOR, ${9:back_clr});",
            "         ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_BORDER_TYPE, ${10:border});",
            "         ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_CORNER, ${11:corner});",
            "         ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_COLOR, ${12:clr});",
            "         ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_STYLE, ${13:style});",
            "         ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_WIDTH, ${14:line_width});",
            "         ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_BACK, ${15:back});",
            "         ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_SELECTABLE, ${16:selection});",
            "         ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_SELECTED, ${17:selection});",
            "         ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_HIDDEN, ${18:hidden});",
            "         ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_ZORDER, ${19:z_order});",
            "   }",
            "}",
            "ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_XDISTANCE, ${5:x});",
            "ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_YDISTANCE, ${6:y});",
            "ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_XSIZE, ${7:width});",
            "ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_YSIZE, ${8:height});"
        ],
        "description": "MT5: Create OBJ_RECTANGLE_LABEL",
        "prefix": "createRectangleLabelMT5",
        "scope": "source.mq4"
    },
    "createTrendObjectMT5": {
        "body":
        [
            "string ${1:id} = IndicatorObjPrefix + \"${2:textId}\";",
            "if (ObjectFind(${3:chart_ID}, ${1:id}) == -1)",
            "{",
            "   if (ObjectCreate(${3:chart_ID}, ${1:id}, OBJ_TREND, ${4:sub_window}, ${5:time1}, ${6:price1}, ${7:time2}, ${8:price2}))",
            "   {",
            "      ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_COLOR, ${9:clr});",
            "      ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_STYLE, ${10:style});",
            "      ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_WIDTH, ${11:width});",
            "      ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_BACK, ${12:back});",
            "      ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_SELECTABLE, ${13:selection});",
            "      ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_SELECTED, ${14:selection});",
            "      ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_RAY_LEFT, ${15:ray_left});",
            "      ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_RAY_RIGHT, ${16:ray_right});", 
            "      ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_HIDDEN, ${17:hidden});",
            "      ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_ZORDER, ${18:z_order});",
            "   }",
            "}",
            "ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_TIME, 0, ${5:time1});",
            "ObjectSetDouble(${3:chart_ID}, ${1:id}, OBJPROP_PRICE, 0, ${6:price1});",
            "ObjectSetInteger(${3:chart_ID}, ${1:id}, OBJPROP_TIME, 1, ${7:time2});",
            "ObjectSetDouble(${3:chart_ID}, ${1:id}, OBJPROP_PRICE, 1, ${8:price2});"
        ],
        "description": "MT5: Create OBJ_TREND",
        "prefix": "createTrendObjectMT5",
        "scope": "source.mq4"
    },
    "createStreamMT5": {
        "body":
        [
            "SetIndexBuffer(${1:id}, ${2:stream}, INDICATOR_DATA);",
            "PlotIndexSetInteger(${1:id}, PLOT_DRAW_TYPE, ${3|DRAW_NONE,DRAW_LINE,DRAW_SECTION,DRAW_HISTOGRAM,DRAW_HISTOGRAM2,DRAW_ARROW,DRAW_ZIGZAG,DRAW_FILLING,DRAW_BARS,DRAW_CANDLES,DRAW_COLOR_LINE,DRAW_COLOR_SECTION,DRAW_COLOR_HISTOGRAM,DRAW_COLOR_HISTOGRAM2,DRAW_COLOR_ARROW,DRAW_COLOR_ZIGZAG,DRAW_COLOR_BARS,DRAW_COLOR_CANDLES|});",
            "PlotIndexSetInteger(${1:id}, PLOT_LINE_COLOR, ${4:clr});",
            "PlotIndexSetString(${1:id}, PLOT_LABEL, ${5:name});"
        ],
        "description": "MT5: Create output stream",
        "prefix": "createStreamMT5",
        "scope": "source.mq4"
    },
    "createColorStreamMT5": {
        "body":
        [
            "SetIndexBuffer(${1:id}, ${2:stream}, INDICATOR_COLOR_INDEX);"
        ],
        "description": "MT5: Create color stream",
        "prefix": "createColorStreamMT5",
        "scope": "source.mq4"
    },
    "createInternalStreamMT5": {
        "body":
        [
            "SetIndexBuffer(${1:id}, ${2:stream}, INDICATOR_CALCULATIONS);"
        ],
        "description": "MT5: Create internal stream",
        "prefix": "createInternalStreamMT5",
        "scope": "source.mq4"
    },
    "createArrowStreamMT5": {
        "body":
        [
            "SetIndexBuffer(${1:id}, ${2:buffer}, INDICATOR_DATA);",
            "PlotIndexSetInteger(${1:id}, PLOT_ARROW, ${3:code});",
            "PlotIndexSetInteger(${1:id}, PLOT_ARROW_SHIFT, 5);"
        ],
        "description": "MT5: Create arrow stream",
        "prefix": "createArrowStreamMT5",
        "scope": "source.mq4"
    }
}